# 🌐 ネットワーク基礎 - ロボットとの通信術

## なぜロボットプログラミングでネットワークが重要？

ロボットプログラミングでは、以下のようなネットワーク通信が必要不可欠です：

### 🤖 ロボット開発での通信シーン
1. **リモート操作**: 離れた場所からロボットを制御
2. **データ収集**: センサーデータをリアルタイムで取得
3. **プログラム開発**: ロボットPCに直接プログラムを転送・実行
4. **監視・デバッグ**: ロボットの状態をリモートで確認
5. **チーム開発**: 複数の開発者が同じロボットにアクセス

### 💡 学習する技術
- **ping**: ネットワーク接続の確認
- **SSH**: 安全なリモートアクセス
- **SCP/rsync**: ファイル転送
- **ポートフォワーディング**: 複雑なネットワーク構成への対応

---

## 🏓 ping - ネットワーク疎通確認の基本

### pingとは？

**ping**は、指定したコンピュータと通信できるかを確認するコマンドです。「ピン球を投げて返ってくるか確認する」ようなイメージです。

### 基本的な使い方

```bash
# 基本的なping
ping google.com

# 4回だけ送信
ping -c 4 google.com

# より詳細な情報付き
ping -v google.com
```

### 実際のロボット開発での使用例

```bash
# ロボットPCとの接続確認
ping 192.168.1.100

# 無線LAN経由での接続確認
ping jedy-robot.local

# ネットワークの応答速度確認
ping -c 10 192.168.1.100

# IPv6での接続確認
ping6 ::1
```

### pingの結果の読み方

```bash
$ ping -c 4 google.com
PING google.com (172.217.161.78) 56(84) bytes of data.
64 bytes from nrt20s21-in-f14.1e100.net (172.217.161.78): icmp_seq=1 ttl=118 time=12.3 ms
64 bytes from nrt20s21-in-f14.1e100.net (172.217.161.78): icmp_seq=2 ttl=118 time=11.8 ms
64 bytes from nrt20s21-in-f14.1e100.net (172.217.161.78): icmp_seq=3 ttl=118 time=12.1 ms
64 bytes from nrt20s21-in-f14.1e100.net (172.217.161.78): icmp_seq=4 ttl=118 time=12.0 ms

--- google.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss
round-trip min/avg/max/mdev = 11.8/12.0/12.3/0.2 ms
```

**重要な指標**:
- **time**: 応答時間（低いほど良い）
- **packet loss**: パケット損失率（0%が理想）
- **ttl**: Time To Live（ネットワークの距離を示す）

### 🔧 pingの便利なオプション

```bash
# 間隔を指定（1秒間隔）
ping -i 1 192.168.1.100

# パケットサイズを指定
ping -s 1000 192.168.1.100

# タイムアウト時間を指定
ping -W 5 192.168.1.100

# 数値IPアドレスのみ表示（DNS解決しない）
ping -n 192.168.1.100

# IPv4を強制
ping -4 google.com
```

### 🚨 pingトラブルシューティング

#### ケース1: 「Destination Host Unreachable」
```bash
$ ping 192.168.1.999
PING 192.168.1.999 (192.168.1.999) 56(84) bytes of data.
From 192.168.1.1 icmp_seq=1 Destination Host Unreachable
```
**原因**: 指定したIPアドレスが存在しない、またはネットワークに接続されていない

#### ケース2: 「Name or service not known」
```bash
$ ping nonexistent.example.com
ping: nonexistent.example.com: Name or service not known
```
**原因**: ドメイン名が存在しない、またはDNS設定に問題

#### ケース3: タイムアウト
```bash
$ ping 192.168.1.100
PING 192.168.1.100 (192.168.1.100) 56(84) bytes of data.
（応答なし - Ctrl+Cで停止）
```
**原因**: ファイアウォールでpingがブロックされている、またはネットワークの問題

---

## 🔐 SSH - 安全なリモートアクセス

### SSHとは？

**SSH**（Secure Shell）は、ネットワーク越しに他のコンピュータに安全にアクセスするためのプロトコルです。ロボット開発では必須のツールです。

### 基本的な接続方法

```bash
# 基本的なSSH接続
ssh username@hostname

# IPアドレスでの接続
ssh pi@192.168.1.100

# ポートを指定して接続
ssh -p 2222 user@192.168.1.100

# 詳細なログ出力で接続
ssh -v user@192.168.1.100
```

### ロボット開発での実用例

```bash
# ロボットPCへの接続（ラズパイの場合）
ssh pi@192.168.1.100

# ロボットPCへの接続（一般的なLinuxの場合）
ssh robot@jedy-robot.local

# Jetson Nanoへの接続
ssh nvidia@192.168.1.101

# 開発用サーバーへの接続
ssh developer@robot-dev-server.local
```

### 初回接続時の確認

```bash
$ ssh pi@192.168.1.100
The authenticity of host '192.168.1.100 (192.168.1.100)' can't be established.
ECDSA key fingerprint is SHA256:abcd1234efgh5678ijkl9012mnop3456qrst7890.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '192.168.1.100' (ECDSA) to the list of known hosts.
pi@192.168.1.100's password:
```

**重要**: 初回接続時は「yes」と入力してホストキーを保存します。

### 🗝️ SSH鍵認証の設定

パスワード入力を省略し、より安全な認証を行う方法：

#### ステップ1: SSH鍵ペアの生成

```bash
# 鍵ペアを生成
ssh-keygen -t rsa -b 4096 -C "your-email@example.com"

# より安全なed25519鍵を生成
ssh-keygen -t ed25519 -C "your-email@example.com"

# 生成された鍵を確認
ls -la ~/.ssh/
```

#### ステップ2: 公開鍵をロボットPCに転送

```bash
# 公開鍵を転送（推奨方法）
ssh-copy-id pi@192.168.1.100

# 手動で転送する場合
cat ~/.ssh/id_rsa.pub | ssh pi@192.168.1.100 "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
```

#### ステップ3: 鍵認証での接続確認

```bash
# パスワードなしで接続できることを確認
ssh pi@192.168.1.100
```

### 📁 ファイル転送 - SCP

```bash
# ローカルからリモートへファイル転送
scp local_file.py pi@192.168.1.100:/home/pi/

# リモートからローカルへファイル転送
scp pi@192.168.1.100:/home/pi/robot_log.txt ./

# ディレクトリを再帰的に転送
scp -r project_folder/ pi@192.168.1.100:/home/pi/

# 転送の進行状況を表示
scp -v local_file.py pi@192.168.1.100:/home/pi/
```

### 🔄 高速ファイル同期 - rsync

```bash
# 基本的な同期
rsync -av project/ pi@192.168.1.100:/home/pi/project/

# 削除された ファイルも同期
rsync -av --delete project/ pi@192.168.1.100:/home/pi/project/

# 除外パターンを指定
rsync -av --exclude='*.log' --exclude='__pycache__' project/ pi@192.168.1.100:/home/pi/project/

# 転送進行状況を表示
rsync -av --progress project/ pi@192.168.1.100:/home/pi/project/
```

### 🌉 ポートフォワーディング

ローカルポートをリモートポートに転送する高度な機能：

```bash
# ローカルポートフォワーディング
ssh -L 8080:localhost:80 pi@192.168.1.100

# リモートポートフォワーディング
ssh -R 9090:localhost:8080 pi@192.168.1.100

# 動的ポートフォワーディング（SOCKSプロキシ）
ssh -D 1080 pi@192.168.1.100
```

**活用例**: ロボットのWebインターフェース（ポート80）にローカルのブラウザ（ポート8080）でアクセス

---

## 🛠️ SSH設定の最適化

### ~/.ssh/configファイルの活用

```bash
# SSH設定ファイルを作成・編集
nano ~/.ssh/config
```

```bash
# ~/.ssh/config の内容例
Host jedy
    HostName 192.168.1.100
    User pi
    Port 22
    IdentityFile ~/.ssh/id_rsa

Host robot-dev
    HostName robot-dev-server.local
    User developer
    Port 2222
    ForwardX11 yes

Host *.local
    User pi
    IdentityFile ~/.ssh/id_ed25519
```

設定後は短縮名で接続可能：

```bash
# 設定ファイルを使った接続
ssh jedy
ssh robot-dev
```

### X11フォワーディング（GUI転送）

```bash
# GUI アプリケーションをリモートで実行
ssh -X pi@192.168.1.100

# より安全な信頼済みX11フォワーディング
ssh -Y pi@192.168.1.100

# リモートでGUIアプリを起動
ssh -X pi@192.168.1.100 "python3 gui_robot_controller.py"
```

---

## 🔧 実践演習

### 🎯 演習1: ネットワーク診断

```bash
# 1. インターネット接続確認
ping -c 3 8.8.8.8

# 2. DNS動作確認
ping -c 3 google.com

# 3. ローカルネットワーク確認
ping -c 3 192.168.1.1

# 4. 応答時間の分析
ping -c 10 google.com | tail -1
```

### 🎯 演習2: SSH基本操作

```bash
# 1. ローカルホストへのSSH接続（練習用）
ssh localhost

# 2. SSH接続の詳細ログ確認
ssh -v localhost

# 3. SSH設定の確認
cat /etc/ssh/sshd_config | grep Port
```

### 🎯 演習3: ファイル転送の練習

```bash
# 1. テストファイルの作成
echo "Robot Control Program v1.0" > robot_test.py

# 2. ローカル間での転送練習
scp robot_test.py localhost:/tmp/

# 3. 転送結果の確認
ssh localhost "cat /tmp/robot_test.py"

# 4. ディレクトリ転送の練習
mkdir test_project
echo "print('Hello Robot')" > test_project/main.py
scp -r test_project/ localhost:/tmp/
```

---

## 🚨 トラブルシューティング

### 接続できない場合の診断手順

#### 1. ネットワーク層の確認

```bash
# 基本的な接続確認
ping target_host

# ルーティングテーブル確認
ip route

# ネットワークインターフェース確認
ip addr show
```

#### 2. SSH特有の問題

```bash
# SSH サービスの状態確認
systemctl status ssh

# SSH設定の構文チェック
sudo sshd -t

# 詳細なデバッグ情報
ssh -vv user@host
```

### よくあるエラーと対処法

#### 「Connection refused」

```bash
# 原因の調査
telnet target_host 22
nmap -p 22 target_host

# 対処法
sudo systemctl start ssh
sudo ufw allow ssh
```

#### 「Permission denied (publickey)」

```bash
# 鍵の権限確認
chmod 600 ~/.ssh/id_rsa
chmod 644 ~/.ssh/id_rsa.pub
chmod 700 ~/.ssh

# 認証方法の確認
ssh -o PreferredAuthentications=password user@host
```

#### 「Host key verification failed」

```bash
# 古いホストキーを削除
ssh-keygen -R hostname

# ホストキーを再度追加
ssh-keyscan hostname >> ~/.ssh/known_hosts
```

---

## 🛡️ セキュリティのベストプラクティス

### 1. 強固なパスワード・鍵の使用

```bash
# 強力なSSH鍵の生成
ssh-keygen -t ed25519 -a 100 -f ~/.ssh/id_ed25519_robot

# パスフレーズ付き鍵の使用
ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_robot
```

### 2. SSH設定の強化

```bash
# /etc/ssh/sshd_config の推奨設定例
Port 2222                    # デフォルトポートを変更
PermitRootLogin no          # root直接ログイン禁止
PasswordAuthentication no   # パスワード認証無効
PubkeyAuthentication yes    # 鍵認証のみ許可
MaxAuthTries 3              # 認証試行回数制限
```

### 3. ファイアウォールの設定

```bash
# UFWでSSHポートを制限
sudo ufw allow from 192.168.1.0/24 to any port 2222
sudo ufw enable
```

---

## 🤖 ロボット開発での活用例

### 典型的なワークフロー

```bash
# 1. ロボットとの接続確認
ping jedy-robot.local

# 2. リモートアクセス
ssh pi@jedy-robot.local

# 3. プログラムの転送
scp robot_controller.py pi@jedy-robot.local:~/

# 4. リモートでプログラム実行
ssh pi@jedy-robot.local "python3 robot_controller.py"

# 5. ログファイルの取得
scp pi@jedy-robot.local:~/robot.log ./
```

### チーム開発での共有

```bash
# 開発チーム用のSSH設定
Host team-robot
    HostName 192.168.1.100
    User team
    Port 2222
    ForwardAgent yes
    
# チーム共有ディレクトリへの同期
rsync -av --exclude='.git' project/ team@team-robot:/shared/project/
```

---

## 🎓 まとめ

### 覚えておくべき基本コマンド

```bash
# ネットワーク確認
ping -c 4 hostname          # 接続確認
ping -t hostname            # 継続的な監視

# SSH接続
ssh user@hostname           # 基本接続
ssh -p port user@hostname   # ポート指定
ssh -X user@hostname        # GUI転送

# ファイル転送
scp file user@host:path     # ファイル転送
rsync -av src/ user@host:dst/  # 同期
```

### 次のステップ

ネットワーク基礎をマスターしたら：
1. **VPN**での安全なリモートアクセス
2. **Docker**コンテナでの開発環境構築
3. **tmux/screen**でのセッション管理
4. **Ansible**での自動化

これで君も立派なネットワークエンジニア！ロボットとの通信を自在に操り、リモート開発を極めよう！
# Python基礎プログラミング

## この章で学ぶこと

この章では、ロボットプログラミングに必要なPythonの基礎を学びます。プログラミングが初めての人でも安心して進められるよう、基本的なことから順番に説明していきます。

## 1. Pythonって何？

Pythonは、世界中で愛されているプログラミング言語です。なぜ人気なのでしょうか？

- **読みやすい**: まるで英語のように書ける
- **多機能**: ロボット制御、AI、ゲーム開発などなんでもできる
- **無料**: お金を払わなくても使える
- **豊富な資料**: 困ったときの情報がたくさんある

## 2. Pythonの世界に入ろう

### 2.1 もっと使いやすいPython環境を準備しよう

普通の`python3`でも動きますが、**IPython**という素晴らしいツールがあります！

#### IPythonって何？✨
- 🎨 **きれいな表示**: コードに色がついて見やすい
- ⬆️ **履歴機能**: 上矢印キーで前に実行したコマンドを呼び出せる
- 🔍 **自動補完**: Tabキーで候補を表示
- 🚀 **高機能**: 普通のPythonより圧倒的に便利

#### IPythonをインストールしよう

```bash
pip install ipython
```

#### IPythonを起動する

```bash
ipython
```

すると、こんなきれいな画面が表示されます：

```
Python 3.8.10 (default, Nov 26 2021, 20:14:08)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.0.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]:
```

この `In [1]:` が見えたら、IPythonの世界に入れました！

#### IPythonの便利な機能

1. **↑キーで履歴を辿れる**
   - 前に実行したコマンドを簡単に呼び出せる

2. **Tabキーで自動補完**
   - `pri` と入力してTabキーを押すと `print` が候補に出る

3. **きれいな色分け**
   - コードが読みやすく色分けされる

### 2.2 Pythonを起動する（従来版）

IPythonがない場合は、普通のPythonでも大丈夫：

```bash
python3
```

すると、以下のような画面が表示されます：

```
Python 3.8.10 (default, Nov 26 2021, 20:14:08)
[GCC 9.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
```

この `>>>` が見えたら、Pythonの世界に入れました！

### 2.3 最初の魔法：print関数

IPythonまたは普通のPythonで以下を入力してみましょう：

```python
print("Hello, Robot World!")
```

**IPythonの場合**：
```
In [1]: print("Hello, Robot World!")
Hello, Robot World!

In [2]: 
```

**普通のPythonの場合**：
```
>>> print("Hello, Robot World!")
Hello, Robot World!
>>> 
```

おめでとうございます！あなたは最初のPythonプログラムを実行しました！

💡 **IPythonの便利さを実感**：
- 上矢印キーを押すと、さっき入力した `print("Hello, Robot World!")` が再度表示される
- 長いコマンドを何度も入力する必要がない！

## 3. 数の魔法：計算をしてみよう

### 3.1 基本的な計算

```python
# 足し算
print(3 + 5)    # 結果: 8

# 引き算
print(10 - 4)   # 結果: 6

# 掛け算
print(6 * 7)    # 結果: 42

# 割り算
print(15 / 3)   # 結果: 5.0
```

### 3.2 ロボットの移動距離を計算

```python
# ロボットが1秒間に30cm進むとき、5秒間で何cm進む？
speed = 30  # cm/秒
time = 5    # 秒
distance = speed * time
print(f"ロボットは{distance}cm進みます")
```

## 4. 記憶の魔法：変数を使おう

### 4.1 変数って何？

変数は、値を入れておく「箱」のようなものです。

```python
robot_name = "JEDY"
robot_height = 120  # cm
robot_speed = 30    # cm/秒

print(f"ロボットの名前: {robot_name}")
print(f"身長: {robot_height}cm")
print(f"速度: {robot_speed}cm/秒")
```

### 4.2 変数の種類

```python
# 文字列（テキスト）
name = "田中太郎"
message = "こんにちは、ロボット！"

# 数値（整数）
age = 15
score = 100

# 数値（小数）
height = 165.5
weight = 52.3

# 真偽値（True/False）
is_student = True
is_robot = False
```

## 5. 条件分岐：もしも〜なら

### 5.1 if文の基本

```python
temperature = 25

if temperature > 30:
    print("今日は暑いですね")
elif temperature > 20:
    print("過ごしやすい気温です")
else:
    print("少し涼しいですね")
```

### 5.2 ロボットの動作制御

```python
battery_level = 80

if battery_level > 50:
    print("ロボットは元気に動けます")
    can_move = True
else:
    print("充電が必要です")
    can_move = False
```

## 6. 繰り返しの魔法：ループ

### 6.1 for文：決まった回数繰り返す

```python
# 1から5まで数える
for i in range(1, 6):
    print(f"カウント: {i}")

# ロボットの歩数をカウント
for step in range(1, 11):
    print(f"歩数: {step}")
```

### 6.2 while文：条件が満たされている間繰り返す

```python
battery = 100

while battery > 0:
    print(f"バッテリー残量: {battery}%")
    battery -= 10  # 10%ずつ減らす
    
print("バッテリーが空になりました")
```

## 7. リスト：複数の値をまとめて管理

### 7.1 リストの基本

```python
# ロボットの関節角度リスト
joint_angles = [0, 45, 90, -45, 0]

# リストの要素にアクセス
print(f"1番目の関節: {joint_angles[0]}度")
print(f"3番目の関節: {joint_angles[2]}度")

# リストの長さ
print(f"関節の数: {len(joint_angles)}")
```

### 7.2 リストの操作

```python
# 新しい角度を追加
joint_angles.append(30)

# 全ての角度を表示
for i, angle in enumerate(joint_angles):
    print(f"関節{i+1}: {angle}度")
```

## 8. 関数：処理をまとめよう

### 8.1 関数の基本

```python
def greet_robot():
    print("こんにちは、ロボット！")
    print("今日も一緒に学びましょう！")

# 関数を呼び出す
greet_robot()
```

### 8.2 引数を持つ関数

```python
def move_robot(distance, direction):
    print(f"ロボットが{direction}に{distance}cm移動します")

# 関数を使う
move_robot(50, "前")
move_robot(30, "右")
```

### 8.3 戻り値を持つ関数

```python
def calculate_distance(x1, y1, x2, y2):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return distance

# 2点間の距離を計算
dist = calculate_distance(0, 0, 3, 4)
print(f"距離: {dist}cm")
```

## 9. 実践：ロボットシミュレーター

これまで学んだことを使って、簡単なロボットシミュレーターを作ってみましょう！

```python
class SimpleRobot:
    def __init__(self, name):
        self.name = name
        self.x = 0
        self.y = 0
        self.battery = 100
        
    def move(self, direction, distance):
        if self.battery <= 0:
            print(f"{self.name}のバッテリーが空です")
            return
            
        if direction == "前":
            self.y += distance
        elif direction == "後":
            self.y -= distance
        elif direction == "右":
            self.x += distance
        elif direction == "左":
            self.x -= distance
            
        self.battery -= 5
        print(f"{self.name}が{direction}に{distance}cm移動しました")
        print(f"現在位置: ({self.x}, {self.y})")
        print(f"バッテリー残量: {self.battery}%")
    
    def status(self):
        print(f"=== {self.name}の状態 ===")
        print(f"位置: ({self.x}, {self.y})")
        print(f"バッテリー: {self.battery}%")

# ロボットを作成
my_robot = SimpleRobot("JEDY")

# ロボットを動かす
my_robot.move("前", 30)
my_robot.move("右", 20)
my_robot.move("後", 10)

# 状態を確認
my_robot.status()
```

## 10. 練習問題

### 問題1: 温度変換器
摂氏温度を華氏温度に変換するプログラムを作ってください。

```python
def celsius_to_fahrenheit(celsius):
    # ここにコードを書いてください
    pass

# テスト
print(celsius_to_fahrenheit(25))  # 結果: 77.0
```

### 問題2: ロボットの歩数カウンター
ロボットが歩いた歩数を記録し、合計歩数と平均歩幅を計算するプログラムを作ってください。

```python
steps = [30, 32, 28, 35, 31, 29, 33]

# 合計歩数を計算
total_steps = # ここにコードを書いてください

# 平均歩幅を計算
average_step = # ここにコードを書いてください

print(f"合計歩数: {total_steps}")
print(f"平均歩幅: {average_step:.1f}cm")
```

## 11. まとめ

この章では、Pythonの基本的な文法を学びました：

- **変数**: 値を保存する
- **条件分岐**: 状況に応じて処理を変える
- **ループ**: 繰り返し処理
- **リスト**: 複数の値をまとめて管理
- **関数**: 処理をまとめて再利用
- **クラス**: データと処理をまとめた設計図

これらの知識を使って、次の章では実際のロボット制御プログラムを作っていきます！

## 12. 次のステップ

- [ROS基礎](ros-basics/index.md): ROSの基本概念を学ぶ
- [ロボット制御](robot-control/index.md): scikit-robotでロボットを動かす

---

**💡 ヒント**: プログラミングは実際に手を動かすことが大切です。サンプルコードを自分で入力して、動かしてみましょう！
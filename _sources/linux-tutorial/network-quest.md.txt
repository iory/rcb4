# üè¥‚Äç‚ò†Ô∏è Network Command Quest - „É™„É¢„Éº„ÉàÈÄö‰ø°„Éû„Çπ„Çø„Éº„Å∏„ÅÆÊåëÊà¶

## „Éü„ÉÉ„Ç∑„Éß„É≥Ê¶ÇË¶Å

Âêõ„Åü„Å°„ÅØ„ÄÅÂ§±„Çè„Çå„Åü„É≠„Éú„ÉÉ„ÉàÂü∫Âú∞„Å®„ÅÆÈÄö‰ø°„ÇíÂæ©Êóß„Åï„Åõ„ÇãÈÄö‰ø°Â∞ÇÈñÄ„ÉÅ„Éº„É†„ÅÆ‰∏ÄÂì°„Å†„ÄÇÂêÑÂú∞„Å´Êï£„Çâ„Å∞„Å£„Åü„É≠„Éú„ÉÉ„Éà„Åü„Å°„Å®„ÅÆÊé•Á∂ö„ÇíÁ¢∫Á´ã„Åó„ÄÅÈáçË¶Å„Å™„Éá„Éº„Çø„ÇíÂõûÂèé„Åô„Çã‰ªªÂãô„Å´Â∞±„ÅÑ„Åü„ÄÇ

„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç≥„Éû„É≥„Éâ„ÇíÈßÜ‰Ωø„Åó„Å¶„ÄÅ„Åô„Åπ„Å¶„ÅÆ„É≠„Éú„ÉÉ„Éà„Å®„ÅÆÈÄö‰ø°„ÇíÂõûÂæ©„Åï„Åõ„ÄÅ„É≠„Éú„ÉÉ„Éà„Éª„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÇíÂÜçÊßãÁØâ„Åõ„ÇàÔºÅ

---

## üîç „É¨„Éô„É´1: ÂÅµÂØü„Éü„ÉÉ„Ç∑„Éß„É≥ - Ping Master

### „Éü„ÉÉ„Ç∑„Éß„É≥1-1: „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁîüÂ≠òÁ¢∫Ë™ç

**ËÉåÊôØ**: Èï∑„ÅÑÈñìÊ≤àÈªô„ÇíÁ∂ö„Åë„Å¶„ÅÑ„Åü„É≠„Éú„ÉÉ„ÉàÂü∫Âú∞„Åã„Çâ„ÅÆ‰ø°Âè∑„ÇíÊ§úÂá∫„Åó„Åü„ÄÇ„Åæ„Åö„ÅØÂü∫Êú¨ÁöÑ„Å™ÈÄö‰ø°„ÅåÂèØËÉΩ„ÅãÁ¢∫Ë™ç„Åõ„Çà„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: ÂêÑÁ®Æ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Çø„Éº„Ç≤„ÉÉ„Éà„Å®„ÅÆÈÄö‰ø°Áä∂Ê≥Å„ÇíË™øÊüª„Åô„Çã

```bash
# 1. „Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÅÆÁ¢∫Ë™ç
ping -c 4 8.8.8.8

# 2. DNSÂãï‰ΩúÁ¢∫Ë™ç
ping -c 4 google.com

# 3. „É≠„Éº„Ç´„É´„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁ¢∫Ë™çÔºà„É´„Éº„Çø„ÉºÔºâ
ping -c 4 192.168.1.1

# 4. Ëá™ÂàÜËá™Ë∫´„Å∏„ÅÆÈÄö‰ø°Á¢∫Ë™ç
ping -c 4 localhost
```

**Ë™øÊüªÈ†ÖÁõÆ**:
- ÂêÑping„ÅÆÂøúÁ≠îÊôÇÈñìÔºàmsÔºâ„ÇíË®òÈå≤
- „Éë„Ç±„ÉÉ„ÉàÊêçÂ§±Áéá„ÇíÁ¢∫Ë™ç
- ÊúÄ„ÇÇÊó©„ÅÑÂøúÁ≠îÊôÇÈñì„ÇíÁâπÂÆö

üèÅ **FLAG{network_scout_activated}**

### „Éü„ÉÉ„Ç∑„Éß„É≥1-2: ÈÄö‰ø°ÂìÅË≥™„ÅÆÂàÜÊûê

**ËÉåÊôØ**: Ë§áÊï∞„ÅÆ„É≠„Éú„ÉÉ„ÉàÂü∫Âú∞„Å®„ÅÆÈÄö‰ø°ÂìÅË≥™„ÇíË©≥„Åó„ÅèÂàÜÊûê„Åó„ÄÅÊúÄÈÅ©„Å™ÈÄö‰ø°„É´„Éº„Éà„ÇíÊ±∫ÂÆö„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: „Çà„ÇäË©≥Á¥∞„Å™„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂàÜÊûê„ÇíÂÆüË°å„Åõ„Çà

```bash
# Èï∑ÊôÇÈñì„ÅÆÈÄö‰ø°„ÉÜ„Çπ„ÉàÔºà30ÁßíÈñìÔºâ
timeout 30 ping google.com

# Â§ß„Åç„Å™„Éë„Ç±„ÉÉ„Éà„Åß„ÅÆ„ÉÜ„Çπ„Éà
ping -s 1000 -c 5 google.com

# È´òÈ†ªÂ∫¶„Åß„ÅÆÈÄö‰ø°„ÉÜ„Çπ„Éà
ping -i 0.2 -c 10 8.8.8.8

# IPv6„Åß„ÅÆÈÄö‰ø°„ÉÜ„Çπ„Éà
ping6 -c 3 ::1
```

**ÂàÜÊûêÈ†ÖÁõÆ**:
- Âπ≥ÂùáÂøúÁ≠îÊôÇÈñì
- ÊúÄÂ§ß„ÉªÊúÄÂ∞èÂøúÁ≠îÊôÇÈñì
- „Ç∏„ÉÉ„Çø„ÉºÔºàÂøúÁ≠îÊôÇÈñì„ÅÆ„Å∞„Çâ„Å§„ÅçÔºâ

üèÅ **FLAG{ping_analyzer_pro}**

### „Éü„ÉÉ„Ç∑„Éß„É≥1-3: Â§±„Çè„Çå„ÅüÂü∫Âú∞„ÅÆÁô∫Ë¶ã

**ËÉåÊôØ**: Âè§„ÅÑË®òÈå≤„Åã„Çâ„ÄÅ„ÅÑ„Åè„Å§„Åã„ÅÆIP„Ç¢„Éâ„É¨„Çπ„ÅåË¶ã„Å§„Åã„Å£„Åü„ÄÇ„Åì„Çå„Çâ„ÅÆÂü∫Âú∞„Åå„Åæ„Å†Áîü„Åç„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç„Åõ„Çà„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: Ë§áÊï∞„ÅÆ„Çø„Éº„Ç≤„ÉÉ„Éà„Å´ÂØæ„Åô„Çã‰∏ÄÊã¨Ë™øÊüª„ÇíÂÆüË°å

```bash
# „ÉÜ„Çπ„ÉàÁî®„ÅÆÁñë‰ººIP„É™„Çπ„Éà„Çí‰ΩúÊàê
echo "127.0.0.1
8.8.8.8
192.168.1.1
1.1.1.1
208.67.222.222" > target_list.txt

# ÂêÑ„Çø„Éº„Ç≤„ÉÉ„Éà„Å∏„ÅÆ ping „ÉÜ„Çπ„Éà
while read ip; do
    echo "Testing $ip..."
    if ping -c 2 -W 3 $ip > /dev/null 2>&1; then
        echo "‚úÖ $ip is ALIVE"
    else
        echo "‚ùå $ip is DOWN"
    fi
done < target_list.txt
```

**ÊàêÂäüÊù°‰ª∂**: ÁîüÂ≠ò„Åó„Å¶„ÅÑ„ÇãÂü∫Âú∞„ÅÆÊï∞„ÇíÁâπÂÆö„Åó„ÄÅ„É™„Çπ„Éà„Çí‰ΩúÊàê

üèÅ **FLAG{base_discovery_complete}**

---

## üîê „É¨„Éô„É´2: ÊΩúÂÖ•„Éü„ÉÉ„Ç∑„Éß„É≥ - SSH Infiltration

### „Éü„ÉÉ„Ç∑„Éß„É≥2-1: „É≠„Éº„Ç´„É´‰æµÂÖ•Ë®ìÁ∑¥

**ËÉåÊôØ**: ÂÆüÈöõ„ÅÆ„É≠„Éú„ÉÉ„ÉàÂü∫Âú∞„Å´‰æµÂÖ•„Åô„ÇãÂâç„Å´„ÄÅ„É≠„Éº„Ç´„É´Áí∞Â¢É„Åß SSH Êé•Á∂ö„ÅÆË®ìÁ∑¥„ÇíË°å„ÅÜ„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: Ëá™ÂàÜ„ÅÆ„Éû„Ç∑„É≥„Å∏„ÅÆSSHÊé•Á∂ö„Çí„Éû„Çπ„Çø„Éº„Åõ„Çà

```bash
# SSH „Çµ„Éº„Éê„Éº„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
which sshd || echo "SSH server not found"

# SSH „Çµ„Éº„Éê„Éº„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç
systemctl status ssh || systemctl status sshd

# ÂøÖË¶Å„Å´Âøú„Åò„Å¶SSH„Çµ„Éº„Éê„Éº„Çí„Ç§„É≥„Çπ„Éà„Éº„É´
# sudo apt install openssh-server

# localhost „Å∏„ÅÆÊé•Á∂ö„ÉÜ„Çπ„Éà
ssh localhost

# Ë©≥Á¥∞„Å™„É≠„Ç∞„Åß„ÅÆÊé•Á∂öÁ¢∫Ë™ç
ssh -v localhost

# ÁâπÂÆö„ÅÆ„Éù„Éº„Éà„Åß„ÅÆÊé•Á∂ö„ÉÜ„Çπ„Éà
ssh -p 22 localhost
```

**Á¢∫Ë™çÈ†ÖÁõÆ**:
- SSHÊé•Á∂ö„ÅåÊàêÂäü„Åô„Çã„Åã
- Êé•Á∂öÊôÇ„ÅÆË™çË®ºÊñπÊ≥ï
- Êé•Á∂öÂæå„ÅÆ„Éó„É≠„É≥„Éó„ÉàË°®Á§∫

üèÅ **FLAG{ssh_local_master}**

### „Éü„ÉÉ„Ç∑„Éß„É≥2-2: „Çª„Ç≠„É•„Ç¢ÈÄö‰ø°„ÅÆÁ¢∫Á´ã

**ËÉåÊôØ**: „Çà„ÇäÂÆâÂÖ®„Å™ÈÄö‰ø°„ÇíÁ¢∫Á´ã„Åô„Çã„Åü„ÇÅ„ÄÅSSHÈçµË™çË®º„Ç∑„Çπ„ÉÜ„É†„ÇíÊßãÁØâ„Åõ„Çà„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: SSHÈçµ„Éö„Ç¢„Çí‰ΩúÊàê„Åó„ÄÅÈçµË™çË®º„ÇíË®≠ÂÆö„Åô„Çã

```bash
# SSHÈçµ„Éö„Ç¢„ÅÆÁîüÊàê
ssh-keygen -t ed25519 -f ~/.ssh/id_quest_robot -C "robot-quest-$(date +%Y%m%d)"

# Èçµ„Éï„Ç°„Ç§„É´„ÅÆÁ¢∫Ë™ç
ls -la ~/.ssh/id_quest_robot*

# ÂÖ¨ÈñãÈçµ„ÅÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç
cat ~/.ssh/id_quest_robot.pub

# ÂÖ¨ÈñãÈçµ„Çí authorized_keys „Å´ËøΩÂä†Ôºà„É≠„Éº„Ç´„É´„ÉÜ„Çπ„ÉàÁî®Ôºâ
cat ~/.ssh/id_quest_robot.pub >> ~/.ssh/authorized_keys

# Èçµ„Éï„Ç°„Ç§„É´„ÅÆÊ®©Èôê„ÇíÊ≠£„Åó„ÅèË®≠ÂÆö
chmod 600 ~/.ssh/id_quest_robot
chmod 644 ~/.ssh/id_quest_robot.pub
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys

# Êñ∞„Åó„ÅÑÈçµ„Åß„ÅÆÊé•Á∂ö„ÉÜ„Çπ„Éà
ssh -i ~/.ssh/id_quest_robot localhost
```

**ÊàêÂäüÊù°‰ª∂**: „Éë„Çπ„ÉØ„Éº„ÉâÂÖ•Âäõ„Å™„Åó„ÅßSSHÊé•Á∂ö„ÅåÂèØËÉΩ

üèÅ **FLAG{crypto_key_master}**

### „Éü„ÉÉ„Ç∑„Éß„É≥2-3: È´òÂ∫¶„Å™Êé•Á∂ö„ÉÜ„ÇØ„Éã„ÉÉ„ÇØ

**ËÉåÊôØ**: Ë§áÈõë„Å™„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁí∞Â¢É„Åß„ÇÇÁ¢∫ÂÆü„Å´Êé•Á∂ö„Åß„Åç„ÇãÈ´òÂ∫¶„Å™ÊäÄË°ì„ÇíÁøíÂæó„Åõ„Çà„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: SSHË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÊ¥ªÁî®„Åó„ÅüÂäπÁéáÁöÑ„Å™Êé•Á∂öÁÆ°ÁêÜ

```bash
# SSHË®≠ÂÆö„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
cat > ~/.ssh/config_quest << 'EOF'
Host robot-local
    HostName localhost
    User $(whoami)
    Port 22
    IdentityFile ~/.ssh/id_quest_robot
    ConnectTimeout 10
    ServerAliveInterval 60

Host robot-backup
    HostName 127.0.0.1
    User $(whoami)
    Port 22
    IdentityFile ~/.ssh/id_quest_robot
    ProxyCommand nc -X connect -x 127.0.0.1:1080 %h %p

Host robot-*
    User robot
    IdentityFile ~/.ssh/id_quest_robot
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
    LogLevel ERROR
EOF

# Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Çí‰Ωø„Å£„ÅüÊé•Á∂ö„ÉÜ„Çπ„Éà
ssh -F ~/.ssh/config_quest robot-local

# Êé•Á∂ö„Ç®„Ç§„É™„Ç¢„Çπ„ÅÆ‰ΩúÊàê
echo "alias sshquest='ssh -F ~/.ssh/config_quest'" >> ~/.bashrc
source ~/.bashrc
```

üèÅ **FLAG{ssh_config_ninja}**

---

## üìÅ „É¨„Éô„É´3: „Éá„Éº„ÇøÂõûÂèé„Éü„ÉÉ„Ç∑„Éß„É≥ - File Transfer Operations

### „Éü„ÉÉ„Ç∑„Éß„É≥3-1: Á∑äÊÄ•„Éá„Éº„ÇøÊïëÂá∫

**ËÉåÊôØ**: „É≠„Éú„ÉÉ„ÉàÂü∫Âú∞„Åã„ÇâÈáçË¶Å„Å™„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÇíÁ∑äÊÄ•ÂõûÂèé„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: SCP „Çí‰Ωø„Å£„Åü„Éï„Ç°„Ç§„É´Ëª¢ÈÄÅÊìç‰Ωú„Çí„Éû„Çπ„Çø„Éº„Åõ„Çà

```bash
# ÂõûÂèéÂØæË±°„ÅÆ„ÉÜ„Çπ„Éà„Éá„Éº„Çø„Çí‰ΩúÊàê
mkdir -p ~/robot_data_recovery
cd ~/robot_data_recovery

# Ê®°Êì¨ÁöÑ„Å™„É≠„Éú„ÉÉ„Éà„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
cat > robot_status.json << 'EOF'
{
  "robot_id": "JEDY-001",
  "timestamp": "2024-01-15T10:30:00Z",
  "battery_level": 87,
  "location": {"x": 10.5, "y": -3.2, "z": 0.1},
  "sensors": {
    "camera": "active",
    "lidar": "active",
    "ultrasonic": "warning"
  },
  "mission_status": "data_recovery_in_progress"
}
EOF

cat > sensor_logs.txt << 'EOF'
2024-01-15 10:25:00 [INFO] Camera initialization complete
2024-01-15 10:25:01 [INFO] LiDAR calibration successful
2024-01-15 10:25:02 [WARN] Ultrasonic sensor interference detected
2024-01-15 10:25:03 [INFO] Navigation system online
2024-01-15 10:25:04 [INFO] Mission parameters loaded
2024-01-15 10:25:05 [INFO] Autonomous mode activated
EOF

echo "SECRET_ROBOT_CODES=ALPHA-7739-BETA-2156" > secret_codes.env

# „Éï„Ç°„Ç§„É´Ëª¢ÈÄÅ„ÅÆÁ∑¥ÁøíÔºàlocalhost „ÇíÊ®°Êì¨„É™„É¢„Éº„Éà„Å®„Åó„Å¶‰ΩøÁî®Ôºâ
# Âçò‰∏Ä„Éï„Ç°„Ç§„É´„ÅÆËª¢ÈÄÅ
scp robot_status.json localhost:/tmp/

# Ë§áÊï∞„Éï„Ç°„Ç§„É´„ÅÆËª¢ÈÄÅ
scp *.txt *.env localhost:/tmp/

# „Éá„Ç£„É¨„ÇØ„Éà„É™ÂÖ®‰Ωì„ÅÆËª¢ÈÄÅ
cd ..
scp -r robot_data_recovery localhost:/tmp/

# Ëª¢ÈÄÅÁµêÊûú„ÅÆÁ¢∫Ë™ç
ssh localhost "ls -la /tmp/robot_*"
ssh localhost "cat /tmp/robot_status.json"
```

**ÊàêÂäüÊù°‰ª∂**: „Åô„Åπ„Å¶„ÅÆ„Éï„Ç°„Ç§„É´„ÅåÊ≠£Â∏∏„Å´Ëª¢ÈÄÅ„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç

üèÅ **FLAG{data_extraction_success}**

### „Éü„ÉÉ„Ç∑„Éß„É≥3-2: È´òÈÄüÂ§ßÂÆπÈáè„Éá„Éº„ÇøÂêåÊúü

**ËÉåÊôØ**: Â§ßÈáè„ÅÆ„Çª„É≥„Çµ„Éº„Éá„Éº„Çø„ÇíÂäπÁéáÁöÑ„Å´ÂêåÊúü„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇrsync„Çí‰Ωø„Å£„ÅüÈ´òÂ∫¶„Å™ÂêåÊúüÊäÄË°ì„ÇíÁøíÂæó„Åõ„Çà„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: rsync „Çí‰Ωø„Å£„ÅüÂäπÁéáÁöÑ„Å™„Éá„Éº„ÇøÂêåÊúü

```bash
# Â§ßÈáè„Éá„Éº„Çø„ÅÆÊ®°Êì¨‰ΩúÊàê
mkdir -p ~/massive_robot_data/{logs,images,videos,configs}

# „É≠„Ç∞„Éï„Ç°„Ç§„É´„ÅÆÁîüÊàê
for i in {1..100}; do
    echo "2024-01-15 $(printf '%02d' $((i % 24))):$(printf '%02d' $((i % 60))):00 [INFO] Robot operation log entry $i" > ~/massive_robot_data/logs/robot_log_$i.txt
done

# Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆÁîüÊàê
for config in motor_control sensor_calibration navigation_params; do
    echo "# $config configuration
param_1=value_$RANDOM
param_2=value_$RANDOM
param_3=value_$RANDOM" > ~/massive_robot_data/configs/$config.conf
done

# Ê®°Êì¨ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅÆ‰ΩúÊàê
for i in {1..20}; do
    dd if=/dev/urandom of=~/massive_robot_data/images/sensor_image_$i.raw bs=1024 count=100 2>/dev/null
done

# rsync „Å´„Çà„ÇãÂêåÊúü
# Âü∫Êú¨ÁöÑ„Å™ÂêåÊúü
rsync -av ~/massive_robot_data/ localhost:/tmp/synced_robot_data/

# ÈÄ≤Ë°åÁä∂Ê≥Å‰ªò„Åç„ÅÆÂêåÊúü
rsync -av --progress ~/massive_robot_data/ localhost:/tmp/synced_robot_data/

# Èô§Â§ñ„Éë„Çø„Éº„É≥„Çí‰Ωø„Å£„ÅüÂêåÊúü
rsync -av --exclude='*.raw' --exclude='logs/' ~/massive_robot_data/ localhost:/tmp/filtered_robot_data/

# ÂâäÈô§ÂêåÊúüÔºàÂç±Èô∫„Å™Êìç‰Ωú„Å™„ÅÆ„ÅßÊ≥®ÊÑèÔºâ
rsync -av --delete ~/massive_robot_data/ localhost:/tmp/exact_robot_data/

# ÂêåÊúüÁµêÊûú„ÅÆÁ¢∫Ë™ç
ssh localhost "du -sh /tmp/*robot_data*"
ssh localhost "find /tmp/synced_robot_data -type f | wc -l"
```

üèÅ **FLAG{sync_master_unlocked}**

### „Éü„ÉÉ„Ç∑„Éß„É≥3-3: Ëá™ÂãïÂåñ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç∑„Çπ„ÉÜ„É†

**ËÉåÊôØ**: ÂÆöÊúüÁöÑ„Å™„Éá„Éº„Çø„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç∑„Çπ„ÉÜ„É†„ÇíÊßãÁØâ„Åó„ÄÅ„Éá„Éº„ÇøÊêçÂ§±„ÇíÈò≤„Åí„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: Ëá™ÂãïÂåñ„Åï„Çå„Åü„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà„Çí‰ΩúÊàê

```bash
# Ëá™Âãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà„ÅÆ‰ΩúÊàê
cat > ~/robot_backup.sh << 'EOF'
#!/bin/bash

# „É≠„Éú„ÉÉ„Éà„Éá„Éº„ÇøËá™Âãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
SOURCE_DIR="$HOME/massive_robot_data"
BACKUP_BASE="/tmp/robot_backups"
BACKUP_DIR="$BACKUP_BASE/backup_$TIMESTAMP"
LOG_FILE="$BACKUP_BASE/backup.log"

# „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê
mkdir -p "$BACKUP_BASE"

# „É≠„Ç∞Èñ¢Êï∞
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

log_message "=== Robot Data Backup Started ==="
log_message "Source: $SOURCE_DIR"
log_message "Destination: $BACKUP_DIR"

# ‰∫ãÂâç„ÉÅ„Çß„ÉÉ„ÇØ
if [ ! -d "$SOURCE_DIR" ]; then
    log_message "ERROR: Source directory not found: $SOURCE_DIR"
    exit 1
fi

# „Éá„Ç£„Çπ„ÇØÂÆπÈáè„ÉÅ„Çß„ÉÉ„ÇØ
REQUIRED_SPACE=$(du -s "$SOURCE_DIR" | cut -f1)
AVAILABLE_SPACE=$(df /tmp | awk 'NR==2 {print $4}')

if [ "$REQUIRED_SPACE" -gt "$AVAILABLE_SPACE" ]; then
    log_message "ERROR: Insufficient disk space"
    exit 1
fi

# „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂÆüË°å
log_message "Starting data synchronization..."
if rsync -av --stats "$SOURCE_DIR/" "$BACKUP_DIR/" 2>&1 | tee -a "$LOG_FILE"; then
    log_message "SUCCESS: Backup completed successfully"
    
    # „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çµ„Ç§„Ç∫„ÅÆË®òÈå≤
    BACKUP_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
    log_message "Backup size: $BACKUP_SIZE"
    
    # Âè§„ÅÑ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÅÆÊ∏ÖÁêÜÔºàÊúÄÊñ∞5„Å§„Çí‰øùÊåÅÔºâ
    ls -t "$BACKUP_BASE"/backup_* | tail -n +6 | xargs -r rm -rf
    log_message "Old backups cleaned up"
    
else
    log_message "ERROR: Backup failed"
    exit 1
fi

log_message "=== Robot Data Backup Completed ==="
EOF

# „Çπ„ÇØ„É™„Éó„Éà„Å´ÂÆüË°åÊ®©Èôê„Çí‰ªò‰∏é
chmod +x ~/robot_backup.sh

# „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂÆüË°å
~/robot_backup.sh

# „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÁµêÊûú„ÅÆÁ¢∫Ë™ç
ls -la /tmp/robot_backups/
cat /tmp/robot_backups/backup.log
```

üèÅ **FLAG{backup_automation_master}**

---

## üåâ „É¨„Éô„É´4: È´òÂ∫¶„Å™ÈÄö‰ø°ÊäÄË°ì - Advanced Networking

### „Éü„ÉÉ„Ç∑„Éß„É≥4-1: „Éù„Éº„Éà„Éï„Ç©„ÉØ„Éº„Éá„Ç£„É≥„Ç∞‰ΩúÊà¶

**ËÉåÊôØ**: Ë§áÈõë„Å™„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÊàê„ÅßÈö†„Åï„Çå„Åü„É≠„Éú„ÉÉ„Éà„Çµ„Éº„Éì„Çπ„Å´„Ç¢„ÇØ„Çª„Çπ„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: SSH „Éù„Éº„Éà„Éï„Ç©„ÉØ„Éº„Éá„Ç£„É≥„Ç∞„Çí‰Ωø„Å£„ÅüÈ´òÂ∫¶„Å™„Ç¢„ÇØ„Çª„ÇπÊäÄË°ì

```bash
# „É≠„Éº„Ç´„É´Web„Çµ„Éº„Éê„Éº„ÇíËµ∑ÂãïÔºàÊ®°Êì¨„É≠„Éú„ÉÉ„Éà„Çµ„Éº„Éì„ÇπÔºâ
python3 -m http.server 8080 &
SERVER_PID=$!

# „É≠„Éº„Ç´„É´„Éù„Éº„Éà„Éï„Ç©„ÉØ„Éº„Éá„Ç£„É≥„Ç∞„ÅÆ„ÉÜ„Çπ„Éà
# „Éù„Éº„Éà9090ÁµåÁî±„Åß„É≠„Éº„Ç´„É´„ÅÆ8080„Å´„Ç¢„ÇØ„Çª„Çπ
ssh -L 9090:localhost:8080 localhost -N &
FORWARD_PID=$!

# Êé•Á∂ö„ÉÜ„Çπ„Éà
sleep 2
curl -s http://localhost:9090 | head -5

# ÂãïÁöÑ„Éù„Éº„Éà„Éï„Ç©„ÉØ„Éº„Éá„Ç£„É≥„Ç∞ÔºàSOCKS„Éó„É≠„Ç≠„Ç∑Ôºâ
ssh -D 1080 localhost -N &
SOCKS_PID=$!

# SOCKS„Éó„É≠„Ç≠„Ç∑ÁµåÁî±„Åß„ÅÆÊé•Á∂ö„ÉÜ„Çπ„Éà
curl -s --socks5 localhost:1080 http://httpbin.org/ip

# „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
kill $SERVER_PID $FORWARD_PID $SOCKS_PID 2>/dev/null
```

üèÅ **FLAG{tunnel_master_activated}**

### „Éü„ÉÉ„Ç∑„Éß„É≥4-2: „Éû„É´„ÉÅ„Éõ„ÉÉ„ÉóÊé•Á∂ö

**ËÉåÊôØ**: Ë§áÊï∞„ÅÆ„Çµ„Éº„Éê„Éº„ÇíÁµåÁî±„Åó„Å¶„Çø„Éº„Ç≤„ÉÉ„Éà„Å´„Ç¢„ÇØ„Çª„Çπ„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: ProxyCommand „Çí‰Ωø„Å£„ÅüÂ§öÊÆµÊé•Á∂ö

```bash
# Â§öÊÆµÊé•Á∂öË®≠ÂÆö„ÅÆ‰ΩúÊàê
cat >> ~/.ssh/config_quest << 'EOF'

Host jump-server
    HostName localhost
    User $(whoami)
    Port 22
    IdentityFile ~/.ssh/id_quest_robot

Host target-robot
    HostName localhost
    User $(whoami)
    Port 22
    ProxyCommand ssh -F ~/.ssh/config_quest jump-server -W %h:%p
    IdentityFile ~/.ssh/id_quest_robot
EOF

# Â§öÊÆµÊé•Á∂ö„ÅÆ„ÉÜ„Çπ„Éà
ssh -F ~/.ssh/config_quest target-robot "echo 'Multi-hop connection successful!'"

# „Éï„Ç°„Ç§„É´Ëª¢ÈÄÅ„Åß„ÅÆÂ§öÊÆµÊé•Á∂ö
echo "Secret robot data from target" > secret_data.txt
scp -F ~/.ssh/config_quest secret_data.txt target-robot:/tmp/
ssh -F ~/.ssh/config_quest target-robot "cat /tmp/secret_data.txt"
```

üèÅ **FLAG{multihop_specialist}**

### „Éü„ÉÉ„Ç∑„Éß„É≥4-3: „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ„Å®X11Ëª¢ÈÄÅ

**ËÉåÊôØ**: GUI „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ„É™„É¢„Éº„ÉàÂÆüË°å„Å®„Çª„ÉÉ„Ç∑„Éß„É≥Ê∞∏Á∂öÂåñÊäÄË°ì„ÇíÁøíÂæó„Åõ„Çà„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: È´òÂ∫¶„Å™„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜÊäÄË°ì

```bash
# X11Ëª¢ÈÄÅ„ÅÆ„ÉÜ„Çπ„ÉàÔºàGUI„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Ôºâ
ssh -X localhost "echo 'X11 forwarding test'; which xeyes && xeyes &"

# „Çª„ÉÉ„Ç∑„Éß„É≥Ê∞∏Á∂öÂåñ„ÅÆ„Åü„ÇÅ„ÅÆscreen/tmux„Çª„ÉÉ„Ç∑„Éß„É≥
ssh localhost "which tmux && tmux new-session -d -s robot-session 'top'"
ssh localhost "tmux list-sessions"
ssh localhost "tmux send-keys -t robot-session 'echo Robot session active' Enter"

# „Çª„ÉÉ„Ç∑„Éß„É≥„Å∏„ÅÆÂÜçÊé•Á∂ö
ssh localhost "tmux attach-session -t robot-session"

# KeepAliveË®≠ÂÆö„Åß„ÅÆÈï∑ÊôÇÈñìÊé•Á∂ö
ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 localhost "sleep 300 && echo 'Long session completed'"
```

üèÅ **FLAG{session_master_elite}**

---

## üõ°Ô∏è „É¨„Éô„É´5: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éª„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞

### „Éü„ÉÉ„Ç∑„Éß„É≥5-1: „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑Âåñ‰ΩúÊà¶

**ËÉåÊôØ**: „É≠„Éú„ÉÉ„Éà„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÇíÊúÄÈ´ò„É¨„Éô„É´„Åæ„ÅßÂºï„Åç‰∏ä„Åí„Çà„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: SSH „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÅÆÊúÄÈÅ©Âåñ

```bash
# „Çª„Ç≠„É•„Ç¢„Å™SSHË®≠ÂÆö„ÅÆ‰ΩúÊàê
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup

# „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑ÂåñË®≠ÂÆöÔºàÂÆüÈöõ„ÅÆÁí∞Â¢É„Åß„ÅØÊ≥®ÊÑè„Åó„Å¶ÂÆüË°åÔºâ
cat > ~/secure_ssh_config << 'EOF'
# „Çª„Ç≠„É•„Ç¢ SSH Ë®≠ÂÆö
Port 2222
Protocol 2
PermitRootLogin no
PubkeyAuthentication yes
PasswordAuthentication no
PermitEmptyPasswords no
MaxAuthTries 3
MaxSessions 5
ClientAliveInterval 300
ClientAliveCountMax 2
LoginGraceTime 60
AllowUsers $(whoami)
DenyUsers root
EOF

# SSHÈçµ„ÅÆÂº∑Âåñ
ssh-keygen -t ed25519 -a 100 -f ~/.ssh/id_ultra_secure -C "ultra-secure-$(date +%Y%m%d)"

# Èçµ„ÅÆÊ®©ÈôêË®≠ÂÆö
chmod 400 ~/.ssh/id_ultra_secure
chmod 444 ~/.ssh/id_ultra_secure.pub

# „Çª„Ç≠„É•„Ç¢Êé•Á∂ö„ÅÆ„ÉÜ„Çπ„Éà
ssh -i ~/.ssh/id_ultra_secure -o StrictHostKeyChecking=yes localhost "echo 'Secure connection established'"
```

üèÅ **FLAG{security_fortress_built}**

### „Éü„ÉÉ„Ç∑„Éß„É≥5-2: „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØË®∫Êñ≠„Éû„Çπ„Çø„Éº

**ËÉåÊôØ**: Ë§áÈõë„Å™„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂïèÈ°å„ÇíË®∫Êñ≠„ÉªËß£Ê±∫„Åô„ÇãÊäÄË°ì„ÇíË∫´„Å´„Å§„Åë„Çà„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: Á∑èÂêàÁöÑ„Å™„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØË®∫Êñ≠„ÉÑ„Éº„É´„ÅÆ‰ΩúÊàê

```bash
# „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØË®∫Êñ≠„Çπ„ÇØ„É™„Éó„Éà„ÅÆ‰ΩúÊàê
cat > ~/network_diagnostics.sh << 'EOF'
#!/bin/bash

echo "üîç Robot Network Diagnostics Tool"
echo "=================================="

# Âü∫Êú¨ÁöÑ„Å™„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊÉÖÂ†±
echo "üì° Network Interfaces:"
ip addr show | grep -E "(inet |inet6 )" | awk '{print "  " $2}'

echo ""
echo "üåê Routing Table:"
ip route | head -5 | while read line; do echo "  $line"; done

echo ""
echo "üì∂ DNS Configuration:"
cat /etc/resolv.conf | grep -v "^#" | while read line; do echo "  $line"; done

echo ""
echo "üèì Connectivity Tests:"

# Êé•Á∂ö„ÉÜ„Çπ„ÉàÂØæË±°
TARGETS=("8.8.8.8" "1.1.1.1" "google.com" "localhost")

for target in "${TARGETS[@]}"; do
    if ping -c 2 -W 3 "$target" >/dev/null 2>&1; then
        RTT=$(ping -c 1 "$target" 2>/dev/null | grep "time=" | grep -o "time=[0-9.]*" | cut -d= -f2)
        echo "  ‚úÖ $target (${RTT}ms)"
    else
        echo "  ‚ùå $target (unreachable)"
    fi
done

echo ""
echo "üîê SSH Service Status:"
if systemctl is-active --quiet ssh || systemctl is-active --quiet sshd; then
    echo "  ‚úÖ SSH service is running"
    echo "  üìä Active SSH connections:"
    who | grep -c "pts" | awk '{print "     Active sessions: " $1}'
else
    echo "  ‚ùå SSH service is not running"
fi

echo ""
echo "üîß Network Performance:"
echo "  üìà Network statistics:"
cat /proc/net/dev | grep -E "(lo|eth|wlan)" | while read line; do
    interface=$(echo $line | cut -d: -f1 | tr -d ' ')
    rx_bytes=$(echo $line | awk '{print $2}')
    tx_bytes=$(echo $line | awk '{print $10}')
    rx_mb=$((rx_bytes / 1024 / 1024))
    tx_mb=$((tx_bytes / 1024 / 1024))
    echo "     $interface: RX ${rx_mb}MB, TX ${tx_mb}MB"
done

echo ""
echo "üéØ Diagnostic Complete!"
EOF

chmod +x ~/network_diagnostics.sh
~/network_diagnostics.sh
```

üèÅ **FLAG{diagnostic_wizard}**

### „Éü„ÉÉ„Ç∑„Éß„É≥5-3: Á∑äÊÄ•ÈÄö‰ø°Âæ©Êóß„Ç∑„Çπ„ÉÜ„É†

**ËÉåÊôØ**: ÈÄö‰ø°ÈöúÂÆ≥ÊôÇ„ÅÆÁ∑äÊÄ•Âæ©ÊóßÊâãÈ†Ü„ÇíÁ¢∫Á´ã„Åõ„Çà„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: Ëá™ÂãïÂæ©Êóß„Ç∑„Çπ„ÉÜ„É†„ÅÆÊßãÁØâ

```bash
# Á∑äÊÄ•Âæ©Êóß„Çπ„ÇØ„É™„Éó„Éà„ÅÆ‰ΩúÊàê
cat > ~/emergency_recovery.sh << 'EOF'
#!/bin/bash

echo "üö® Emergency Network Recovery System"
echo "==================================="

TARGETS=("8.8.8.8" "1.1.1.1" "localhost")
RECOVERY_LOG="/tmp/recovery_$(date +%Y%m%d_%H%M%S).log"

log_action() {
    echo "[$(date '+%H:%M:%S')] $1" | tee -a "$RECOVERY_LOG"
}

check_connectivity() {
    for target in "${TARGETS[@]}"; do
        if ping -c 2 -W 3 "$target" >/dev/null 2>&1; then
            log_action "‚úÖ Connectivity to $target: OK"
            return 0
        else
            log_action "‚ùå Connectivity to $target: FAILED"
        fi
    done
    return 1
}

recover_network() {
    log_action "üîß Starting network recovery procedures..."
    
    # 1. „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÅÆÂÜçËµ∑Âãï
    log_action "Restarting network interfaces..."
    sudo ip link set lo down 2>/dev/null || true
    sudo ip link set lo up 2>/dev/null || true
    
    # 2. DNSË®≠ÂÆö„ÅÆÁ¢∫Ë™ç
    if [ ! -f "/etc/resolv.conf" ] || [ ! -s "/etc/resolv.conf" ]; then
        log_action "Restoring DNS configuration..."
        echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf.recovery >/dev/null
    fi
    
    # 3. SSH „Çµ„Éº„Éì„Çπ„ÅÆÁ¢∫Ë™ç
    if ! systemctl is-active --quiet ssh && ! systemctl is-active --quiet sshd; then
        log_action "Attempting to restart SSH service..."
        sudo systemctl start ssh 2>/dev/null || sudo systemctl start sshd 2>/dev/null || true
    fi
    
    log_action "üîß Recovery procedures completed"
}

main() {
    log_action "üö® Emergency recovery system activated"
    
    if check_connectivity; then
        log_action "‚úÖ Network connectivity is operational"
    else
        log_action "‚ùå Network connectivity issues detected"
        recover_network
        
        # ÂÜç„ÉÜ„Çπ„Éà
        sleep 5
        if check_connectivity; then
            log_action "‚úÖ Network recovery successful!"
        else
            log_action "‚ùå Network recovery failed - manual intervention required"
        fi
    fi
    
    log_action "üìã Recovery log saved to: $RECOVERY_LOG"
    echo "üìã Full log available at: $RECOVERY_LOG"
}

main
EOF

chmod +x ~/emergency_recovery.sh
~/emergency_recovery.sh
```

üèÅ **FLAG{emergency_recovery_online}**

---

## üèÜ ÊúÄÁµÇ„Éü„ÉÉ„Ç∑„Éß„É≥: „É≠„Éú„ÉÉ„ÉàÈÄö‰ø°Âè∏‰ª§ÈÉ®„ÅÆÊßãÁØâ

### ÊúÄÁµÇ„ÉÅ„É£„É¨„É≥„Ç∏: Áµ±ÂêàÈÄö‰ø°„Ç∑„Çπ„ÉÜ„É†„ÅÆÂÆåÊàê

**ËÉåÊôØ**: „Åô„Åπ„Å¶„ÅÆÊäÄË°ì„ÇíÁµêÈõÜ„Åó„ÄÅÂÆåÂÖ®„Å™„É≠„Éú„ÉÉ„ÉàÈÄö‰ø°ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÇíÊßãÁØâ„Åõ„Çà„ÄÇ

**„ÇØ„Ç®„Çπ„Éà**: Áµ±ÂêàÈÄö‰ø°ÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅÆ‰ΩúÊàê

```bash
# Áµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜ„Çπ„ÇØ„É™„Éó„Éà„ÅÆ‰ΩúÊàê
cat > ~/robot_command_center.sh << 'EOF'
#!/bin/bash

# „É≠„Éú„ÉÉ„ÉàÈÄö‰ø°Âè∏‰ª§ÈÉ®„Ç∑„Çπ„ÉÜ„É†
ROBOTS_CONFIG="$HOME/.robot_fleet.conf"
LOGS_DIR="$HOME/robot_logs"
mkdir -p "$LOGS_DIR"

# Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆÂàùÊúüÂåñ
if [ ! -f "$ROBOTS_CONFIG" ]; then
    cat > "$ROBOTS_CONFIG" << EOC
# Robot Fleet Configuration
# Format: name,ip,port,user,key_file
robot-alpha,127.0.0.1,22,$(whoami),~/.ssh/id_quest_robot
robot-beta,localhost,22,$(whoami),~/.ssh/id_quest_robot
robot-gamma,127.0.0.1,22,$(whoami),~/.ssh/id_ed25519
EOC
fi

show_menu() {
    clear
    echo "ü§ñ ROBOT COMMUNICATION COMMAND CENTER ü§ñ"
    echo "=========================================="
    echo "1. üì° Fleet Status Check"
    echo "2. üîó Connect to Robot"
    echo "3. üìÅ File Transfer"
    echo "4. üìä System Diagnostics"
    echo "5. üö® Emergency Recovery"
    echo "6. üìã View Logs"
    echo "7. ‚öôÔ∏è  Fleet Configuration"
    echo "0. üö™ Exit"
    echo "=========================================="
    read -p "Select option [0-7]: " choice
}

fleet_status() {
    echo "üîç Checking fleet status..."
    echo "Robot Name       Status    Response Time"
    echo "----------------------------------------"
    
    while IFS=',' read -r name ip port user key; do
        if [[ $name =~ ^# ]] || [ -z "$name" ]; then continue; fi
        
        if ping -c 2 -W 3 "$ip" >/dev/null 2>&1; then
            rtt=$(ping -c 1 "$ip" 2>/dev/null | grep "time=" | grep -o "time=[0-9.]*" | cut -d= -f2)
            printf "%-15s ‚úÖ ONLINE   %s\n" "$name" "${rtt}ms"
        else
            printf "%-15s ‚ùå OFFLINE  ---\n" "$name"
        fi
    done < "$ROBOTS_CONFIG"
}

connect_robot() {
    echo "üîó Available robots:"
    awk -F, '!/^#/ && NF>1 {print NR-1 ". " $1}' "$ROBOTS_CONFIG"
    read -p "Select robot number: " num
    
    robot_info=$(awk -F, -v n=$((num+1)) 'NR==n && !/^#/ {print}' "$ROBOTS_CONFIG")
    if [ -n "$robot_info" ]; then
        name=$(echo "$robot_info" | cut -d, -f1)
        ip=$(echo "$robot_info" | cut -d, -f2)
        port=$(echo "$robot_info" | cut -d, -f3)
        user=$(echo "$robot_info" | cut -d, -f4)
        key=$(echo "$robot_info" | cut -d, -f5)
        
        echo "Connecting to $name ($ip)..."
        ssh -i "${key/#\~/$HOME}" -p "$port" "$user@$ip"
    else
        echo "Invalid robot selection"
    fi
}

file_transfer() {
    echo "üìÅ File Transfer Options:"
    echo "1. Upload to robot"
    echo "2. Download from robot"
    read -p "Select option [1-2]: " opt
    
    case $opt in
        1)
            read -p "Local file path: " local_file
            read -p "Remote destination: " remote_path
            echo "üöÄ Upload functionality would be implemented here"
            ;;
        2)
            read -p "Remote file path: " remote_file
            read -p "Local destination: " local_path
            echo "üì• Download functionality would be implemented here"
            ;;
    esac
}

system_diagnostics() {
    echo "üìä Running system diagnostics..."
    ~/network_diagnostics.sh 2>/dev/null || echo "Diagnostics script not found"
}

emergency_recovery() {
    echo "üö® Initiating emergency recovery..."
    ~/emergency_recovery.sh 2>/dev/null || echo "Recovery script not found"
}

view_logs() {
    echo "üìã Recent log files:"
    ls -lt "$LOGS_DIR"/ 2>/dev/null | head -10 || echo "No logs found"
}

fleet_config() {
    echo "‚öôÔ∏è Fleet Configuration:"
    echo "Current robots:"
    cat "$ROBOTS_CONFIG"
    echo ""
    echo "Edit configuration? (y/n)"
    read -r response
    if [[ $response =~ ^[Yy] ]]; then
        ${EDITOR:-nano} "$ROBOTS_CONFIG"
    fi
}

main() {
    while true; do
        show_menu
        case $choice in
            1) fleet_status; read -p "Press Enter to continue..."; ;;
            2) connect_robot; ;;
            3) file_transfer; read -p "Press Enter to continue..."; ;;
            4) system_diagnostics; read -p "Press Enter to continue..."; ;;
            5) emergency_recovery; read -p "Press Enter to continue..."; ;;
            6) view_logs; read -p "Press Enter to continue..."; ;;
            7) fleet_config; ;;
            0) echo "üëã Shutting down command center..."; exit 0; ;;
            *) echo "Invalid option"; sleep 1; ;;
        esac
    done
}

main
EOF

chmod +x ~/robot_command_center.sh

echo "üéâ Robot Command Center is ready!"
echo "üöÄ Launch with: ~/robot_command_center.sh"

# „Éá„É¢ÂÆüË°å
echo ""
echo "üé¨ Demo - Fleet Status Check:"
~/robot_command_center.sh << 'DEMO'
1

0
DEMO
```

üèÅ **ULTIMATE_FLAG{network_command_master_2024}**

---

## üéä Network Quest ÂÆåÂÖ®Âà∂Ë¶áÔºÅ

### üèÖ Áç≤Âæó„Åó„Åü„Çπ„Ç≠„É´

- ‚úÖ **ping „Éû„Çπ„Çø„É™„Éº**: „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁñéÈÄöÁ¢∫Ë™ç„Å®ÂìÅË≥™ÂàÜÊûê
- ‚úÖ **SSH „Ç®„Ç≠„Çπ„Éë„Éº„Éà**: ÂÆâÂÖ®„Å™„É™„É¢„Éº„Éà„Ç¢„ÇØ„Çª„Çπ„Å®Ë™çË®º
- ‚úÖ **„Éï„Ç°„Ç§„É´Ëª¢ÈÄÅ„Éó„É≠**: SCP/rsync „Å´„Çà„ÇãÂäπÁéáÁöÑ„Å™„Éá„Éº„ÇøÁÆ°ÁêÜ
- ‚úÖ **„Éù„Éº„Éà„Éï„Ç©„ÉØ„Éº„Éá„Ç£„É≥„Ç∞**: Ë§áÈõë„Å™„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊßãÊàê„Å∏„ÅÆÂØæÂøú
- ‚úÖ **„Çª„Ç≠„É•„É™„ÉÜ„Ç£Â∞ÇÈñÄÂÆ∂**: SSHÂº∑Âåñ„Å®„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÊúÄÈÅ©Âåñ
- ‚úÖ **„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞**: ÈöúÂÆ≥Ë®∫Êñ≠„Å®Á∑äÊÄ•Âæ©Êóß
- ‚úÖ **„Ç∑„Çπ„ÉÜ„É†Áµ±Âêà**: ÂåÖÊã¨ÁöÑ„Å™ÈÄö‰ø°ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†ÊßãÁØâ

### üéØ ÂÆüÊà¶„Å∏„ÅÆÂøúÁî®

Network Quest „Çí„Éû„Çπ„Çø„Éº„Åó„ÅüÂêõ„ÅØ„ÄÅ„ÇÇ„ÅÜÂÆüÈöõ„ÅÆ„É≠„Éú„ÉÉ„ÉàÈñãÁô∫„ÅßÔºö

- **„É™„É¢„Éº„Éà„É≠„Éú„ÉÉ„ÉàÂà∂Âæ°**: ÂÆâÂÖ®„ÅßÁ¢∫ÂÆü„Å™ÈÅ†ÈöîÊìç‰Ωú
- **„Éá„Éº„ÇøÂèéÈõÜ„Ç∑„Çπ„ÉÜ„É†**: ÂäπÁéáÁöÑ„Å™„Çª„É≥„Çµ„Éº„Éá„Éº„ÇøÁÆ°ÁêÜ
- **„ÉÅ„Éº„É†ÈñãÁô∫Áí∞Â¢É**: Ë§áÊï∞ÈñãÁô∫ËÄÖ„Åß„ÅÆÂÖ±Âêå‰ΩúÊ•≠
- **„Éà„É©„Éñ„É´ÂØæÂøú**: ËøÖÈÄü„Å™ÂïèÈ°åËß£Ê±∫„Å®Âæ©Êóß

### üöÄ Ê¨°„ÅÆ„É¨„Éô„É´„Å∏

„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÈÄö‰ø°„Çí„Éû„Çπ„Çø„Éº„Åó„Åü„Çâ„ÄÅÂÆüÈöõ„ÅÆ„É≠„Éú„ÉÉ„Éà„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÅßÔºö

- **[ü§ñ ROS„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÈÄö‰ø°](../ros-basics/index.md)** „Åß„É≠„Éú„ÉÉ„ÉàÈñìÈÄö‰ø°
- **[‚ö° „É™„Ç¢„É´„Çø„Ç§„É†Âà∂Âæ°](../robot-control/index.md)** „Åß„ÅÆ‰ΩéÈÅÖÂª∂ÈÄö‰ø°
- **[üîß IoT„Éá„Éê„Ç§„ÇπÈÄ£Êê∫](../arduino-basics/index.md)** „Åß„ÅÆ„Çª„É≥„Çµ„Éº„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ

Âêõ„ÅØ„ÇÇ„ÅÜÁ´ãÊ¥æ„Å™„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÈÄö‰ø°„Éû„Çπ„Çø„Éº„Å†ÔºÅ„É≠„Éú„ÉÉ„Éà„Åü„Å°„Å®„ÅÆÂÆåÁíß„Å™ÈÄö‰ø°„ÇíÂÆüÁèæ„Åó„Çà„ÅÜÔºÅ
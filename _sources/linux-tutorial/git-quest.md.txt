# 🏴‍☠️ Git Command Quest - バージョン管理マスターへの挑戦

## ミッション概要

君たちは、散らばったロボットプログラムの断片を集めて、完全なシステムを再構築する任務に就いた。しかし、これらのプログラムはGitリポジトリに分散して保存されており、バージョン管理の知識なしには取得できない。

Gitコマンドを駆使して、すべてのプログラム断片を集め、ロボットシステムを復活させよう！

---

## 🚀 レベル1: 探索ミッション - Clone & Status

### ミッション1-1: 失われたプロジェクトの発見

**背景**: 古い研究データベースから、重要なロボットプロジェクトの場所を示すURLが発見された。

**クエスト**: 以下の模擬リポジトリをクローンし、基本情報を収集せよ

```bash
# 練習用のリポジトリをクローン
mkdir ~/git_missions && cd ~/git_missions
git clone https://github.com/octocat/Hello-World.git
cd Hello-World
```

**調査項目**:
1. リポジトリの現在の状態を確認
2. コミット履歴の件数を数える
3. 最新のコミット作者を特定

```bash
git status
git log --oneline | wc -l
git log -1 --pretty=format:"%an"
```

🏁 **FLAG{repository_explorer}**

### ミッション1-2: 隠されたファイルの追跡

**背景**: リポジトリ内に隠されたロボット制御ファイルがあるという情報をキャッチした。

**クエスト**: 
1. 新しいファイル `robot_control.py` を作成
2. 初期バージョンの制御コードを記述
3. Gitで変更を追跡可能な状態にする

```bash
# ロボット制御プログラムの基本コードを作成
cat > robot_control.py << 'EOF'
#!/usr/bin/env python3
"""
ロボット制御プログラム v1.0
基本的な移動機能
"""

class RobotController:
    def __init__(self):
        self.speed = 0.5
        print("Robot Controller v1.0 初期化完了")
    
    def move_forward(self):
        print(f"前進開始 - 速度: {self.speed}")
    
    def stop(self):
        print("停止")

if __name__ == "__main__":
    robot = RobotController()
    robot.move_forward()
    robot.stop()
EOF

# ファイルの状態を確認
git status
```

🏁 **FLAG{file_tracker}**

---

## 📝 レベル2: 記録ミッション - Add & Commit

### ミッション2-1: 初回コミットの儀式

**背景**: 新しく発見されたロボットプログラムを、正式にプロジェクトの一部として記録する必要がある。

**クエスト**: 作成したロボット制御プログラムを正式にコミットせよ

```bash
# ファイルをステージング
git add robot_control.py

# 状態を確認
git status

# 記念すべき初回コミット
git commit -m "feat: ロボット制御プログラムの初期実装

- RobotControllerクラスの基本構造
- 移動と停止の基本機能
- 初期バージョン v1.0"

# コミット履歴を確認
git log --oneline
```

🏁 **FLAG{first_commit_master}**

### ミッション2-2: 機能拡張と変更追跡

**背景**: ロボットに新しい機能が必要になった。方向転換機能を追加し、変更履歴を正確に記録せよ。

**クエスト**: ロボット制御プログラムを拡張し、変更を追跡する

```bash
# プログラムに機能を追加
cat >> robot_control.py << 'EOF'

    def turn_left(self):
        print("左回転")
    
    def turn_right(self):
        print("右回転")
    
    def set_speed(self, new_speed):
        self.speed = max(0.1, min(2.0, new_speed))
        print(f"速度を {self.speed} に設定")
EOF

# 変更の詳細を確認
git diff robot_control.py

# 変更をコミット
git add robot_control.py
git commit -m "feat: 方向転換機能と速度制御を追加"
```

🏁 **FLAG{enhancement_tracker}**

### ミッション2-3: バグ修正の記録

**背景**: テスト中にロボットの速度制限に問題が発見された。緊急修正が必要だ。

**クエスト**: バグを修正し、修正内容を明確に記録する

```bash
# バグのあるコードを修正
sed -i 's/max(0.1, min(2.0, new_speed))/max(0.1, min(1.5, new_speed))/' robot_control.py

# 修正内容を確認
git diff robot_control.py

# バグ修正をコミット
git add robot_control.py
git commit -m "fix: 最大速度を1.5に制限（安全性向上）

- 以前の最大速度2.0は危険
- 安全基準に従い1.5に変更
- テスト済み"

# 変更履歴を確認
git log --oneline -3
```

🏁 **FLAG{bug_fix_specialist}**

---

## 🌿 レベル3: 分岐ミッション - Branch & Merge

### ミッション3-1: 実験的機能の開発

**背景**: 新しいセンサー機能を実験的に開発する必要がある。メインプログラムに影響を与えずに開発を進めよ。

**クエスト**: 新機能開発用のブランチを作成し、実験的な機能を実装する

```bash
# 現在のブランチを確認
git branch

# 新機能開発用ブランチを作成
git checkout -b feature/sensor-integration

# センサー機能を追加
cat >> robot_control.py << 'EOF'

class SensorController:
    def __init__(self):
        self.sensors = {
            'ultrasonic': True,
            'camera': True,
            'lidar': False
        }
    
    def read_distance(self):
        return "距離: 1.5m"
    
    def detect_obstacle(self):
        return "障害物検出: なし"
EOF

# 変更をコミット
git add robot_control.py
git commit -m "feat: センサー統合機能を追加

- SensorControllerクラス実装
- 距離測定機能
- 障害物検出機能"

# ブランチの状態を確認
git log --oneline --graph
```

🏁 **FLAG{branch_creator}**

### ミッション3-2: 統合作戦

**背景**: 実験的機能のテストが成功した。メインプログラムに統合する時が来た。

**クエスト**: 開発ブランチをメインブランチにマージする

```bash
# メインブランチに切り替え
git checkout main

# 開発ブランチをマージ
git merge feature/sensor-integration

# マージ結果を確認
git log --oneline --graph -5

# 不要になったブランチを削除
git branch -d feature/sensor-integration

# 最終的なファイル内容を確認
cat robot_control.py
```

🏁 **FLAG{merge_master}**

---

## 🌐 レベル4: 同期ミッション - Pull & Push

### ミッション4-1: リモート情報収集

**背景**: チームメンバーが他の場所でプログラムを更新している可能性がある。最新情報を入手せよ。

**クエスト**: リモートリポジトリの情報を調査する

```bash
# リモートリポジトリの情報を確認
git remote -v

# リモートの最新情報を取得（まだマージしない）
git fetch origin

# リモートとローカルの差分を確認
git log --oneline origin/main..HEAD
git log --oneline HEAD..origin/main
```

🏁 **FLAG{remote_scout}**

### ミッション4-2: 作業状況のバックアップ

**背景**: 重要な作業内容をチームと共有し、バックアップを作成する必要がある。

**クエスト**: 自分の作業をリモートリポジトリに保存する

```bash
# 現在の作業をバックアップ用ブランチとしてプッシュ
git checkout -b backup/my-robot-work

# README.mdを作成してプロジェクトを説明
cat > README.md << 'EOF'
# Robot Control System

## 概要
ロボット制御とセンサー統合システム

## 機能
- 基本移動制御 (前進、停止、回転)
- 速度制御
- センサー統合 (超音波、カメラ、LiDAR)
- 障害物検出

## 使用方法
```python
from robot_control import RobotController, SensorController

robot = RobotController()
sensors = SensorController()

robot.move_forward()
print(sensors.read_distance())
robot.stop()
```

## 作成者
Git Quest 参加者
EOF

# 新しいファイルを追加
git add README.md
git commit -m "docs: プロジェクト説明のREADMEを追加"

# リモートブランチ作成の準備（実際のpushは環境による）
echo "git push origin backup/my-robot-work"
```

🏁 **FLAG{backup_specialist}**

---

## 🔄 レベル5: 高度な操作 - Stash & Reset

### ミッション5-1: 緊急作業の一時保存

**背景**: 重要な開発作業中に、緊急のホットフィックスが必要になった。現在の作業を安全に保存して緊急対応せよ。

**クエスト**: 作業中の変更を一時保存し、緊急対応を行う

```bash
# 新機能の開発を開始
echo "# 新機能: 自動運転モード" >> robot_control.py
echo "def autonomous_mode(self):" >> robot_control.py
echo "    print('自動運転開始')" >> robot_control.py

# 現在の状況を確認
git status
git diff

# 作業を一時保存
git stash save "WIP: 自動運転モードの実装中"

# 緊急修正: エラーメッセージの改善
sed -i 's/print("停止")/print("緊急停止: ロボットが安全に停止しました")/' robot_control.py

# 緊急修正をコミット
git add robot_control.py
git commit -m "fix: 停止メッセージを改善（緊急対応）"

# 一時保存した作業を復元
git stash pop

# 状況を確認
git status
```

🏁 **FLAG{stash_ninja}**

## ミッション5-2: 時間を戻す魔法

**背景**: 実験的なコードで問題が発生した。特定の時点まで戻って、やり直しが必要だ。

**クエスト**: 特定のコミットまで戻り、代替アプローチを試す

```bash
# 現在の履歴を確認
git log --oneline -5

# 問題のあるコミットの前まで戻る（HEADから2つ前）
git reset --soft HEAD~2

# 状況を確認
git status

# 代替実装を作成
cat >> robot_control.py << 'EOF'

def emergency_stop(self):
    """緊急停止機能"""
    self.speed = 0
    print("🚨 緊急停止が実行されました")

def status_check(self):
    """システム状態チェック"""
    return {
        'speed': self.speed,
        'status': 'operational',
        'sensors': 'active'
    }
EOF

# 新しいアプローチをコミット
git add robot_control.py
git commit -m "feat: 安全機能とステータス確認を実装

- 緊急停止機能追加
- システム状態チェック機能追加
- より安全な設計に変更"
```

🏁 **FLAG{time_traveler}**

---

## 🏆 最終ミッション: プロジェクト統合チャレンジ

### 最終チャレンジ: 完全なロボットシステムの構築

**背景**: すべてのミッションで得た知識を総動員し、完全なロボットプロジェクトを構築せよ。

**クエスト**: 以下の要件を満たすプロジェクトを作成する

1. 適切なディレクトリ構造
2. 包括的なREADME
3. .gitignoreファイル
4. 複数のモジュール
5. テストファイル
6. 完全なGit履歴

```bash
# プロジェクト構造を作成
mkdir -p robot_system/{src,tests,config,docs}

# メインプログラムを移動
mv robot_control.py robot_system/src/

# 設定ファイルを作成
cat > robot_system/config/robot_config.yaml << 'EOF'
robot:
  name: "JEDY"
  max_speed: 1.5
  sensors:
    - ultrasonic
    - camera
    - lidar
  
safety:
  emergency_stop_enabled: true
  max_temperature: 70
EOF

# テストファイルを作成
cat > robot_system/tests/test_robot.py << 'EOF'
#!/usr/bin/env python3
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from robot_control import RobotController

def test_robot_initialization():
    robot = RobotController()
    assert robot.speed == 0.5
    print("✅ ロボット初期化テスト成功")

def test_speed_control():
    robot = RobotController()
    robot.set_speed(1.0)
    assert robot.speed == 1.0
    print("✅ 速度制御テスト成功")

if __name__ == "__main__":
    test_robot_initialization()
    test_speed_control()
    print("🎉 すべてのテストが成功しました！")
EOF

# .gitignoreを作成
cat > robot_system/.gitignore << 'EOF'
# Python
__pycache__/
*.pyc
*.pyo
*.egg-info/

# ログファイル
*.log
logs/

# 一時ファイル
*~
.DS_Store

# IDE設定
.vscode/
.idea/

# 実行ファイル
*.exe
*.out
EOF

# 包括的なREADMEを作成
cat > robot_system/README.md << 'EOF'
# 🤖 Robot Control System

最終ミッション完成版 - 統合ロボット制御システム

## 📁 プロジェクト構造

```
robot_system/
├── src/
│   └── robot_control.py    # メインロボット制御モジュール
├── tests/
│   └── test_robot.py       # テストスイート
├── config/
│   └── robot_config.yaml  # 設定ファイル
├── docs/
├── .gitignore
└── README.md
```

## 🚀 クイックスタート

```bash
cd robot_system
python3 src/robot_control.py
```

## 🧪 テスト実行

```bash
python3 tests/test_robot.py
```

## 🎯 Git Quest 達成項目

- [x] リポジトリクローン
- [x] ファイル追跡
- [x] コミット作成
- [x] ブランチ操作
- [x] マージ実行
- [x] 一時保存活用
- [x] 履歴操作
- [x] プロジェクト構築

## 🏆 取得フラグ

すべてのミッションクリアでGitマスターの称号獲得！
EOF

# すべてをGitに追加
cd robot_system
git init
git add .
git commit -m "feat: 統合ロボット制御システムの完成

🎉 Git Quest 最終ミッション完了

- 完全なプロジェクト構造
- テストスイート実装
- 設定ファイル管理
- 包括的なドキュメント
- 適切な.gitignore設定

取得スキル:
✅ Git基本操作
✅ ブランチ管理
✅ コミット管理
✅ プロジェクト構築
✅ チーム開発準備"

# 最終確認
git log --oneline --graph
echo "🎊 Git Quest 完全制覇！君は真のGitマスターだ！"
```

🏁 **ULTIMATE_FLAG{git_grandmaster_2024}**

---

## 🎊 クエスト完了！

### 🏅 獲得したスキル

- ✅ **リポジトリ操作**: clone, status, log
- ✅ **変更管理**: add, commit, diff
- ✅ **ブランチ操作**: branch, checkout, merge
- ✅ **同期操作**: pull, push, fetch
- ✅ **高度な操作**: stash, reset, revert
- ✅ **プロジェクト管理**: .gitignore, README作成

### 🎯 次のステップ

Git Questを制覇した君は、もうチーム開発の準備ができている！

- **GitHub**でのプルリクエスト
- **CI/CD**での自動テスト
- **Issue**でのプロジェクト管理
- **Wiki**でのドキュメント作成

これで実際のロボットプログラミングプロジェクトでも、Gitを使って安全で効率的な開発ができるようになったぞ！
# 🐧 Linux基礎講座 - ターミナルの世界へようこそ

## このセクションで学ぶこと

ロボットプログラミングに必要なLinuxの基本知識を学びます。まずは基礎をしっかり理解してから、実践的なミッションに挑戦しましょう！

---

## Linuxって何？🤔

**Linux**は、世界中のロボットや多くのサーバーで使われているオペレーティングシステム（OS）です。

### OSって何だっけ？
OSは、コンピュータを動かすための基本ソフトウェアです。みんなが知っているOSには：
- 📱 **スマホ**: Android（これも実はLinux系！）、iOS
- 💻 **パソコン**: Windows、macOS、Linux
- 🎮 **ゲーム機**: PlayStation、Nintendo Switch（これもLinux系！）

**Linux**は無料で使えて、プログラミングに適した環境が整っているため、ロボット開発では欠かせません。

### なぜロボットプログラミングでLinuxを使うの？

1. **安定性**: 長時間動作するロボットに最適
2. **カスタマイズ性**: 必要な機能だけをインストール可能
3. **開発ツール**: プログラミングに必要なツールが豊富
4. **コミュニティ**: 世界中の開発者が情報を共有

---

## ターミナルとは？🎬

**ターミナル**は、コンピュータと文字でやり取りするためのツールです。

### 映画でよく見るあの黒い画面！

<!-- Google検索結果のスクリーンショットを追加予定 -->
<!-- ![Google検索結果](../_static/images/google-search-terminal.png) -->

ハリウッド映画でハッカーが使っている、あの黒い画面に緑の文字が流れるかっこいいやつです！実際は、マウスでクリックする代わりに、キーボードでコマンド（命令）を入力してコンピュータを操作します。

### なぜターミナルを使うの？
- ⚡ **スピード**: マウス操作より圧倒的に速い
- 🎯 **精密**: 細かい作業が得意
- 🔄 **自動化**: 同じ作業を繰り返すのが得意
- 🦾 **パワフル**: 高度な操作が可能

### ターミナルを開く方法

1. キーボードショートカット: `Ctrl + Alt + T`
2. アプリケーションメニューから「端末」または「Terminal」を選択

### プロンプトの見方

```bash
username@hostname:~$ 
```

- `username`: あなたのユーザー名
- `hostname`: コンピュータの名前
- `~`: 現在のディレクトリ（`~`はホームディレクトリを表す）
- `$`: 一般ユーザーを表す（管理者の場合は`#`）

---

## 基本的なコマンド

### 🗂️ ファイルとディレクトリの操作

#### 現在地を確認する

```bash
pwd
```
**P**rint **W**orking **D**irectory の略。今いる場所を表示します。

#### ファイル一覧を表示する

```bash
ls              # 基本的なファイル一覧
ls -l           # 詳細情報付きで表示
ls -la          # 隠しファイルも含めて詳細表示
ls -lh          # ファイルサイズを人間が読みやすい形で表示
```

#### ディレクトリを移動する

```bash
cd Documents    # Documentsディレクトリに移動
cd ..           # 一つ上のディレクトリに移動
cd ~            # ホームディレクトリに移動
cd /            # ルートディレクトリに移動
```

#### ディレクトリを作成する

```bash
mkdir my_project           # 単一のディレクトリ作成
mkdir -p project/src/main  # 階層ディレクトリを一度に作成
```

### 📝 ファイル操作

#### ファイルを作成する

```bash
touch readme.txt           # 空のファイルを作成
echo "Hello World" > hello.txt  # 内容付きでファイル作成
```

#### ファイルの中身を見る

```bash
cat filename.txt           # ファイル全体を表示
head filename.txt          # 先頭10行を表示
tail filename.txt          # 末尾10行を表示
less filename.txt          # ページ単位で表示（q で終了）
```

#### ファイルをコピー・移動・削除

```bash
cp file1.txt file2.txt     # ファイルをコピー
cp -r dir1 dir2            # ディレクトリを再帰的にコピー
mv old_name.txt new_name.txt  # ファイル名変更・移動
rm filename.txt            # ファイル削除
rm -r directory_name       # ディレクトリを削除
```

### 🔍 検索とフィルタリング

#### ファイルを探す

```bash
find . -name "*.txt"       # 現在のディレクトリから.txtファイルを検索
find /home -name "robot*"  # /homeから"robot"で始まるファイルを検索
```

#### 文字列を検索する

```bash
grep "Hello" filename.txt          # ファイル内で"Hello"を検索
grep -r "error" /var/log/          # ディレクトリ内を再帰的に検索
grep -i "robot" *.txt              # 大文字小文字を区別せずに検索
```

### 🔧 システム操作

#### プロセス（実行中のプログラム）を確認

```bash
ps aux                     # 実行中のプロセス一覧
top                        # リアルタイムでプロセス状況を表示
kill 1234                  # プロセスID 1234のプロセスを終了
```

#### 権限管理

```bash
sudo command               # 管理者権限でコマンド実行
chmod 755 script.sh       # ファイルに実行権限を付与
chown user:group file.txt  # ファイルの所有者を変更
```

---

## パイプとリダイレクト

### パイプ（|）: コマンドをつなげる

```bash
ls -la | grep ".txt"       # ファイル一覧から.txtファイルだけ抽出
cat logfile.txt | grep "ERROR" | wc -l  # エラー行の数をカウント
```

### リダイレクト: 出力を保存する

```bash
echo "Hello" > file.txt    # 出力をファイルに保存（上書き）
echo "World" >> file.txt   # 出力をファイルに追加
command 2> error.log      # エラー出力をファイルに保存
```

---

## 便利なショートカット

| キー | 動作 |
|------|------|
| `Tab` | コマンドやファイル名の自動補完 |
| `Ctrl + C` | 実行中のコマンドを中断 |
| `Ctrl + D` | ターミナルを終了 |
| `Ctrl + L` | 画面をクリア |
| `↑/↓` | コマンド履歴をたどる |
| `Ctrl + R` | コマンド履歴を検索 |

---

## 基本演習

### 🎯 演習1: ディレクトリ操作

以下の手順を実行してみましょう：

```bash
# 1. 現在地を確認
pwd

# 2. ホームディレクトリに移動
cd ~

# 3. robot_practice というディレクトリを作成
mkdir robot_practice

# 4. 作成したディレクトリに移動
cd robot_practice

# 5. 現在のディレクトリの中身を確認
ls -la
```

### 🎯 演習2: ファイル操作

```bash
# 1. テキストファイルを作成
echo "This is my first robot program" > program.txt

# 2. ファイルの中身を確認
cat program.txt

# 3. ファイルをコピー
cp program.txt backup.txt

# 4. ファイル一覧を確認
ls -l

# 5. ファイルに追記
echo "Version 2.0" >> program.txt

# 6. 変更後の内容を確認
cat program.txt
```

### 🎯 演習3: 検索練習

```bash
# 1. 複数のファイルを作成
echo "robot sensor data" > sensor.log
echo "robot motor control" > motor.log
echo "system error occurred" > error.log

# 2. "robot"を含むファイルを検索
grep "robot" *.log

# 3. ファイル名で検索
find . -name "*.log"

# 4. パイプを使った組み合わせ
ls -la | grep "log"
```

---

## よくあるエラーとその対処法

### 1. "command not found"
```bash
# 原因: コマンド名のスペルミスやパッケージ未インストール
# 対処: スペルを確認、またはパッケージをインストール
sudo apt install package_name
```

### 2. "Permission denied"
```bash
# 原因: ファイルやディレクトリへのアクセス権限がない
# 対処: sudo を使うか、権限を変更
sudo command
chmod +x filename
```

### 3. "No such file or directory"
```bash
# 原因: 指定したファイルやディレクトリが存在しない
# 対処: パスを確認、またはファイルを作成
ls -la  # 存在するファイルを確認
pwd     # 現在地を確認
```

---

## 🎓 基礎学習完了！

お疲れさまでした！これでLinuxの基本操作を理解できました。

### 学習したスキル
- ✅ ターミナルの基本操作
- ✅ ファイル・ディレクトリ操作
- ✅ 基本的な検索とフィルタリング
- ✅ パイプとリダイレクト
- ✅ よくあるエラーの対処法

---

## 次のステップ

基礎をマスターしたら、いよいよ実践的なミッションに挑戦しましょう！

**[🏴‍☠️ Linux Command Quest - 実践ミッションに挑戦](quest.md)**

実際のロボットプログラミングで使うシナリオに基づいた、CTF形式の実践的な課題が待っています。基礎知識を活かして、すべてのミッションをクリアしよう！